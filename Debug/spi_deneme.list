
spi_deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b60  08002b60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b68  08002b68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002b7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002b7c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1d8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171c  00000000  00000000  0002a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151c2  00000000  00000000  0002c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009afc  00000000  00000000  00041b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ef0  00000000  00000000  0004b676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002248  00000000  00000000  000ce5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002b30 	.word	0x08002b30

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002b30 	.word	0x08002b30

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Enc_Read_Operation>:

extern SPI_HandleTypeDef hspi2;


uint8_t Enc_Read_Operation(uint8_t operation, uint8_t address)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	460a      	mov	r2, r1
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]
	// System Reset Command 	1 1 1		1 1 1 1 1    |	N\A
	//                          7 6 5       4 3 2 1 0	 |

	uint8_t spiData[2];

	spiData[0] = (operation << 5) | address; // last 3 bits are operation, first 5 bit of a byte is argument, shown above
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	015b      	lsls	r3, r3, #5
 80004e0:	b25a      	sxtb	r2, r3
 80004e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	733b      	strb	r3, [r7, #12]

	Spi_Enable();
 80004ee:	f000 f925 	bl	800073c <Spi_Enable>
	HAL_SPI_Transmit(&hspi2, &spiData[0], 1, 100);
 80004f2:	f107 010c 	add.w	r1, r7, #12
 80004f6:	2364      	movs	r3, #100	; 0x64
 80004f8:	2201      	movs	r2, #1
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <Enc_Read_Operation+0x54>)
 80004fc:	f001 fbb7 	bl	8001c6e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &spiData[1], 1, 100);
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	1c59      	adds	r1, r3, #1
 8000506:	2364      	movs	r3, #100	; 0x64
 8000508:	2201      	movs	r2, #1
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <Enc_Read_Operation+0x54>)
 800050c:	f001 fceb 	bl	8001ee6 <HAL_SPI_Receive>
	Spi_Disable();
 8000510:	f000 f920 	bl	8000754 <Spi_Disable>

	return spiData[1];
 8000514:	7b7b      	ldrb	r3, [r7, #13]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000028 	.word	0x20000028

08000524 <Enc_Write_Operation>:


void Enc_Write_Operation(uint8_t operation, uint8_t address, uint8_t  data)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	460b      	mov	r3, r1
 8000530:	71bb      	strb	r3, [r7, #6]
 8000532:	4613      	mov	r3, r2
 8000534:	717b      	strb	r3, [r7, #5]

	uint8_t spiData[2];

	Spi_Enable();
 8000536:	f000 f901 	bl	800073c <Spi_Enable>

	spiData[0] = (operation << 5) | address;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	015b      	lsls	r3, r3, #5
 800053e:	b25a      	sxtb	r2, r3
 8000540:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000544:	4313      	orrs	r3, r2
 8000546:	b25b      	sxtb	r3, r3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	733b      	strb	r3, [r7, #12]
	spiData[1] = data;
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	737b      	strb	r3, [r7, #13]

	HAL_SPI_Transmit(&hspi2, spiData, 2, 100);
 8000550:	f107 010c 	add.w	r1, r7, #12
 8000554:	2364      	movs	r3, #100	; 0x64
 8000556:	2202      	movs	r2, #2
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <Enc_Write_Operation+0x48>)
 800055a:	f001 fb88 	bl	8001c6e <HAL_SPI_Transmit>

	Spi_Disable();
 800055e:	f000 f8f9 	bl	8000754 <Spi_Disable>

}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028

08000570 <Set_Bank>:
	return Enc_Read_Operation(ENC28_READ_CTRL_REG , address); // choose operation that wanted

}


void Set_Bank(uint8_t BANK_){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]

	Enc_Write_Operation(ENC_REC_WRITE_REG, ECON1, BANK_); // bank is selected
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	461a      	mov	r2, r3
 800057e:	211f      	movs	r1, #31
 8000580:	2002      	movs	r0, #2
 8000582:	f7ff ffcf 	bl	8000524 <Enc_Write_Operation>

}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <Enc_Write_Cont_Reg8>:


void Enc_Write_Cont_Reg8(uint8_t address, uint8_t data)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	460a      	mov	r2, r1
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	4613      	mov	r3, r2
 800059c:	71bb      	strb	r3, [r7, #6]

	Enc_Write_Operation(ENC_REC_WRITE_REG, address, data); // choose operation that wanted
 800059e:	79ba      	ldrb	r2, [r7, #6]
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	4619      	mov	r1, r3
 80005a4:	2002      	movs	r0, #2
 80005a6:	f7ff ffbd 	bl	8000524 <Enc_Write_Operation>


}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <Enc_Write_Cont_Reg16>:
	return data_16bit;

}

void Enc_Write_Cont_Reg16(uint8_t address, uint16_t data)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b084      	sub	sp, #16
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4603      	mov	r3, r0
 80005ba:	460a      	mov	r2, r1
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4613      	mov	r3, r2
 80005c0:	80bb      	strh	r3, [r7, #4]

	uint8_t datalow = (uint8_t)(data & 0x00FF);
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	73fb      	strb	r3, [r7, #15]
	uint8_t datahigh = (uint8_t)((data & 0xFF00) >> 8);
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	73bb      	strb	r3, [r7, #14]

	Enc_Write_Cont_Reg8(address, datalow);
 80005ce:	7bfa      	ldrb	r2, [r7, #15]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffda 	bl	800058e <Enc_Write_Cont_Reg8>
	Enc_Write_Cont_Reg8((address + 1), datahigh);// shift for last 8 bits
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	3301      	adds	r3, #1
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	7bba      	ldrb	r2, [r7, #14]
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffd2 	bl	800058e <Enc_Write_Cont_Reg8>

}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <Enc_INIT>:

void Enc_INIT()
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0

	Spi_Enable();
 80005f6:	f000 f8a1 	bl	800073c <Spi_Enable>

	Enc_Write_Operation(ENC28_SOFT_RESET, 0x1F, 0x00);
 80005fa:	2200      	movs	r2, #0
 80005fc:	211f      	movs	r1, #31
 80005fe:	2007      	movs	r0, #7
 8000600:	f7ff ff90 	bl	8000524 <Enc_Write_Operation>


	while (!Enc_Read_Operation(ENC28_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY);
 8000604:	bf00      	nop
 8000606:	211d      	movs	r1, #29
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ff5f 	bl	80004cc <Enc_Read_Operation>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0f8      	beq.n	8000606 <Enc_INIT+0x14>


	ENC_SET_BANK_0_REGISTERS();
 8000614:	f000 f80a 	bl	800062c <ENC_SET_BANK_0_REGISTERS>

	ENC_SET_BANK_1_REGISTERS();
 8000618:	f000 f83f 	bl	800069a <ENC_SET_BANK_1_REGISTERS>

	ENC_SET_BANK_2_REGISTERS();
 800061c:	f000 f84e 	bl	80006bc <ENC_SET_BANK_2_REGISTERS>

	ENC_SET_BANK_3_REGISTERS();
 8000620:	f000 f869 	bl	80006f6 <ENC_SET_BANK_3_REGISTERS>

	Spi_Disable();
 8000624:	f000 f896 	bl	8000754 <Spi_Disable>

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <ENC_SET_BANK_0_REGISTERS>:


void ENC_SET_BANK_0_REGISTERS(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

	Set_Bank(BANK_0);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ff9d 	bl	8000570 <Set_Bank>

	// ETHERNET BUFFER ORGANIZATION
	// this bytes dedicated to RECEIVE Hardware

	// decide tx memory size
	Enc_Write_Cont_Reg16(ETXST, TXSTART_INIT);
 8000636:	2100      	movs	r1, #0
 8000638:	2004      	movs	r0, #4
 800063a:	f7ff ffba 	bl	80005b2 <Enc_Write_Cont_Reg16>
	Enc_Write_Cont_Reg16(ETXND, TXSTOP_INIT);
 800063e:	f641 11fe 	movw	r1, #6654	; 0x19fe
 8000642:	2006      	movs	r0, #6
 8000644:	f7ff ffb5 	bl	80005b2 <Enc_Write_Cont_Reg16>

	// decide rx memory size
	Enc_Write_Cont_Reg16(ERXST, RXSTART_INIT);
 8000648:	f641 11ff 	movw	r1, #6655	; 0x19ff
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ffb0 	bl	80005b2 <Enc_Write_Cont_Reg16>
	Enc_Write_Cont_Reg16(ERXND, RXSTOP_INIT);
 8000652:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000656:	200a      	movs	r0, #10
 8000658:	f7ff ffab 	bl	80005b2 <Enc_Write_Cont_Reg16>


	Enc_Write_Cont_Reg16(ERXRDPT, RXSTART_INIT);
 800065c:	f641 11ff 	movw	r1, #6655	; 0x19ff
 8000660:	200c      	movs	r0, #12
 8000662:	f7ff ffa6 	bl	80005b2 <Enc_Write_Cont_Reg16>


	Enc_Write_Cont_Reg16(ERXWRPT, RXSTART_INIT);
 8000666:	f641 11ff 	movw	r1, #6655	; 0x19ff
 800066a:	200e      	movs	r0, #14
 800066c:	f7ff ffa1 	bl	80005b2 <Enc_Write_Cont_Reg16>

	//automatically increment to point to the next address after the last bit of each byte
	Enc_Write_Cont_Reg8(ECON2, ECON2_AUTOINC);
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	201e      	movs	r0, #30
 8000674:	f7ff ff8b 	bl	800058e <Enc_Write_Cont_Reg8>

	// no loopback of transmitted frames
	Enc_Write_Cont_Reg16(PHCON2, PHCON2_HDLDIS);
 8000678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067c:	2010      	movs	r0, #16
 800067e:	f7ff ff98 	bl	80005b2 <Enc_Write_Cont_Reg16>

	// enable interrutps
	Enc_Write_Operation(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 8000682:	22c0      	movs	r2, #192	; 0xc0
 8000684:	211b      	movs	r1, #27
 8000686:	2004      	movs	r0, #4
 8000688:	f7ff ff4c 	bl	8000524 <Enc_Write_Operation>

	// enable packet reception
	Enc_Write_Operation(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 800068c:	2204      	movs	r2, #4
 800068e:	211f      	movs	r1, #31
 8000690:	2004      	movs	r0, #4
 8000692:	f7ff ff47 	bl	8000524 <Enc_Write_Operation>

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}

0800069a <ENC_SET_BANK_1_REGISTERS>:


void ENC_SET_BANK_1_REGISTERS(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0

	Set_Bank(BANK_1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff65 	bl	8000570 <Set_Bank>

	// DESTINATION ADDRESS  FF-FF-FF-FF-FF-FF
	// enable the filters

	uint16_t erxfcon =  ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN;
 80006a6:	23b1      	movs	r3, #177	; 0xb1
 80006a8:	80fb      	strh	r3, [r7, #6]
	Enc_Write_Cont_Reg16(ERXFCON, erxfcon);
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2018      	movs	r0, #24
 80006b0:	f7ff ff7f 	bl	80005b2 <Enc_Write_Cont_Reg16>

}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <ENC_SET_BANK_2_REGISTERS>:


void ENC_SET_BANK_2_REGISTERS(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

	Set_Bank(BANK_2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f7ff ff55 	bl	8000570 <Set_Bank>

	// enable MAC receive
	// enable automatic padding to 60bytes and CRC operations

	Enc_Write_Cont_Reg16(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 80006c6:	210d      	movs	r1, #13
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff ff72 	bl	80005b2 <Enc_Write_Cont_Reg16>

	Enc_Write_Cont_Reg16(MACON3, PADCFG1|TXCRCEN|FULDPX|MACON3_FRMLNEN);
 80006ce:	2113      	movs	r1, #19
 80006d0:	2002      	movs	r0, #2
 80006d2:	f7ff ff6e 	bl	80005b2 <Enc_Write_Cont_Reg16>

	Enc_Write_Cont_Reg16(MAMXFLL, MAX_FRAMELEN);
 80006d6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80006da:	200a      	movs	r0, #10
 80006dc:	f7ff ff69 	bl	80005b2 <Enc_Write_Cont_Reg16>


	Enc_Write_Cont_Reg8(MABBIPG, 0x15);
 80006e0:	2115      	movs	r1, #21
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff ff53 	bl	800058e <Enc_Write_Cont_Reg8>

	Enc_Write_Cont_Reg16(MAIPGL, 0xC12);
 80006e8:	f640 4112 	movw	r1, #3090	; 0xc12
 80006ec:	2006      	movs	r0, #6
 80006ee:	f7ff ff60 	bl	80005b2 <Enc_Write_Cont_Reg16>

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <ENC_SET_BANK_3_REGISTERS>:


void ENC_SET_BANK_3_REGISTERS(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0

	Set_Bank(BANK_3);
 80006fa:	2003      	movs	r0, #3
 80006fc:	f7ff ff38 	bl	8000570 <Set_Bank>

	Enc_Write_Cont_Reg8(MAADR5, MAC_5);
 8000700:	2141      	movs	r1, #65	; 0x41
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff ff43 	bl	800058e <Enc_Write_Cont_Reg8>
	Enc_Write_Cont_Reg8(MAADR6, MAC_6);
 8000708:	21dc      	movs	r1, #220	; 0xdc
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff3f 	bl	800058e <Enc_Write_Cont_Reg8>
	Enc_Write_Cont_Reg8(MAADR3, MAC_3);
 8000710:	2175      	movs	r1, #117	; 0x75
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff ff3b 	bl	800058e <Enc_Write_Cont_Reg8>
	Enc_Write_Cont_Reg8(MAADR4, MAC_4);
 8000718:	21a9      	movs	r1, #169	; 0xa9
 800071a:	2003      	movs	r0, #3
 800071c:	f7ff ff37 	bl	800058e <Enc_Write_Cont_Reg8>
	Enc_Write_Cont_Reg8(MAADR1, MAC_1);
 8000720:	21a8      	movs	r1, #168	; 0xa8
 8000722:	2004      	movs	r0, #4
 8000724:	f7ff ff33 	bl	800058e <Enc_Write_Cont_Reg8>
	Enc_Write_Cont_Reg8(MAADR2, MAC_2);
 8000728:	21cd      	movs	r1, #205	; 0xcd
 800072a:	2005      	movs	r0, #5
 800072c:	f7ff ff2f 	bl	800058e <Enc_Write_Cont_Reg8>

	//enable flow control
	Enc_Write_Cont_Reg8(EFLOCON, 0x06);
 8000730:	2106      	movs	r1, #6
 8000732:	2017      	movs	r0, #23
 8000734:	f7ff ff2b 	bl	800058e <Enc_Write_Cont_Reg8>

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <Spi_Enable>:

}


void Spi_Enable(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // set cs pin low
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <Spi_Enable+0x14>)
 8000746:	f000 fd7b 	bl	8001240 <HAL_GPIO_WritePin>

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020000 	.word	0x40020000

08000754 <Spi_Disable>:


void Spi_Disable(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	  // set cs pin high
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <Spi_Disable+0x14>)
 800075e:	f000 fd6f 	bl	8001240 <HAL_GPIO_WritePin>

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40020000 	.word	0x40020000

0800076c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fa8a 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f80a 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f8d4 	bl	8000924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800077c:	f000 f8a8 	bl	80008d0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000780:	f000 f870 	bl	8000864 <MX_SPI2_Init>

  Enc_INIT();
 8000784:	f7ff ff35 	bl	80005f2 <Enc_INIT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x1c>
	...

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 f9c0 	bl	8002b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <SystemClock_Config+0xd0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a28      	ldr	r2, [pc, #160]	; (800085c <SystemClock_Config+0xd0>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <SystemClock_Config+0xd0>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemClock_Config+0xd4>)
 80007da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000800:	2310      	movs	r3, #16
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000804:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800080a:	2304      	movs	r3, #4
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800080e:	2307      	movs	r3, #7
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fd2c 	bl	8001274 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000822:	f000 f8ed 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2302      	movs	r3, #2
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2102      	movs	r1, #2
 8000842:	4618      	mov	r0, r3
 8000844:	f000 ff8e 	bl	8001764 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800084e:	f000 f8d7 	bl	8000a00 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_SPI2_Init+0x64>)
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MX_SPI2_Init+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_SPI2_Init+0x64>)
 8000870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_SPI2_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_SPI2_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_SPI2_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_SPI2_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_SPI2_Init+0x64>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_SPI2_Init+0x64>)
 8000898:	2230      	movs	r2, #48	; 0x30
 800089a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_SPI2_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_SPI2_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_SPI2_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_SPI2_Init+0x64>)
 80008b0:	220a      	movs	r2, #10
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_SPI2_Init+0x64>)
 80008b6:	f001 f951 	bl	8001b5c <HAL_SPI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008c0:	f000 f89e 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000028 	.word	0x20000028
 80008cc:	40003800 	.word	0x40003800

080008d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART2_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART2_UART_Init+0x4c>)
 8000908:	f001 fed0 	bl	80026ac <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f875 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000080 	.word	0x20000080
 8000920:	40004400 	.word	0x40004400

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a2c      	ldr	r2, [pc, #176]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a25      	ldr	r2, [pc, #148]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <MX_GPIO_Init+0xd0>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <MX_GPIO_Init+0xd0>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_GPIO_Init+0xd0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2110      	movs	r1, #16
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_GPIO_Init+0xd4>)
 80009b0:	f000 fc46 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <MX_GPIO_Init+0xd8>)
 80009cc:	f000 fab4 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d0:	2310      	movs	r3, #16
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0xd4>)
 80009e8:	f000 faa6 	bl	8000f38 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020800 	.word	0x40020800

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fa40 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <HAL_SPI_MspInit+0xc0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d14a      	bne.n	8000b14 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_SPI_MspInit+0xc4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <HAL_SPI_MspInit+0xc8>)
 8000aee:	f000 fa23 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b04:	2305      	movs	r3, #5
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <HAL_SPI_MspInit+0xcc>)
 8000b10:	f000 fa12 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40003800 	.word	0x40003800
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020400 	.word	0x40020400

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b86:	230c      	movs	r3, #12
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b96:	2307      	movs	r3, #7
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_MspInit+0x8c>)
 8000ba2:	f000 f9c9 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f890 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c50:	4c0b      	ldr	r4, [pc, #44]	; (8000c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5e:	f7ff ffd7 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f001 ff39 	bl	8002ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fd81 	bl	800076c <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c78:	08002b70 	.word	0x08002b70
  ldr r2, =_sbss
 8000c7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c80:	200000c8 	.word	0x200000c8

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f90d 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fea6 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f917 	bl	8000f1e <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f8ed 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200000c4 	.word	0x200000c4

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200000c4 	.word	0x200000c4

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff47 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff5c 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffb0 	bl	8000e8c <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e159      	b.n	8001208 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 8148 	bne.w	8001202 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d005      	beq.n	8000f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d017      	beq.n	8001028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a2 	beq.w	8001202 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b57      	ldr	r3, [pc, #348]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a56      	ldr	r2, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b54      	ldr	r3, [pc, #336]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a49      	ldr	r2, [pc, #292]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x202>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_GPIO_Init+0x2f4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x1fe>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a47      	ldr	r2, [pc, #284]	; (8001230 <HAL_GPIO_Init+0x2f8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a46      	ldr	r2, [pc, #280]	; (8001234 <HAL_GPIO_Init+0x2fc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x1f6>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a45      	ldr	r2, [pc, #276]	; (8001238 <HAL_GPIO_Init+0x300>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x1f2>
 8001126:	2304      	movs	r3, #4
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112a:	2307      	movs	r3, #7
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x204>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <HAL_GPIO_Init+0x304>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117e:	4a2f      	ldr	r2, [pc, #188]	; (800123c <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <HAL_GPIO_Init+0x304>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a8:	4a24      	ldr	r2, [pc, #144]	; (800123c <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_GPIO_Init+0x304>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_GPIO_Init+0x304>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_GPIO_Init+0x304>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_GPIO_Init+0x304>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f aea2 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40013c00 	.word	0x40013c00

08001240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e264      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d075      	beq.n	800137e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	4ba3      	ldr	r3, [pc, #652]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d00c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129e:	4ba0      	ldr	r3, [pc, #640]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d112      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4b9d      	ldr	r3, [pc, #628]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b6:	d10b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	4b99      	ldr	r3, [pc, #612]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d05b      	beq.n	800137c <HAL_RCC_OscConfig+0x108>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d157      	bne.n	800137c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e23f      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x74>
 80012da:	4b91      	ldr	r3, [pc, #580]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a90      	ldr	r2, [pc, #576]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b8b      	ldr	r3, [pc, #556]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a8a      	ldr	r2, [pc, #552]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b88      	ldr	r3, [pc, #544]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a87      	ldr	r2, [pc, #540]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 800130c:	4b84      	ldr	r3, [pc, #528]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a83      	ldr	r2, [pc, #524]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b81      	ldr	r3, [pc, #516]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a80      	ldr	r2, [pc, #512]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fd12 	bl	8000d54 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fd0e 	bl	8000d54 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e204      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b76      	ldr	r3, [pc, #472]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xc0>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fcfe 	bl	8000d54 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fcfa 	bl	8000d54 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1f0      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b6c      	ldr	r3, [pc, #432]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0xe8>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	4b65      	ldr	r3, [pc, #404]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b62      	ldr	r3, [pc, #392]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b5c      	ldr	r3, [pc, #368]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1c4      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b56      	ldr	r3, [pc, #344]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4952      	ldr	r1, [pc, #328]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b4f      	ldr	r3, [pc, #316]	; (8001524 <HAL_RCC_OscConfig+0x2b0>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fcb3 	bl	8000d54 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fcaf 	bl	8000d54 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e1a5      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b43      	ldr	r3, [pc, #268]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4940      	ldr	r1, [pc, #256]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b3f      	ldr	r3, [pc, #252]	; (8001524 <HAL_RCC_OscConfig+0x2b0>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fc92 	bl	8000d54 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fc8e 	bl	8000d54 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e184      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d030      	beq.n	80014c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d016      	beq.n	8001494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_RCC_OscConfig+0x2b4>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fc72 	bl	8000d54 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fc6e 	bl	8000d54 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e164      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x200>
 8001492:	e015      	b.n	80014c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_RCC_OscConfig+0x2b4>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fc5b 	bl	8000d54 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fc57 	bl	8000d54 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e14d      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a0 	beq.w	800160e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x2b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d121      	bne.n	800154e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_RCC_OscConfig+0x2b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_RCC_OscConfig+0x2b8>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fc1d 	bl	8000d54 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	e011      	b.n	8001542 <HAL_RCC_OscConfig+0x2ce>
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	42470000 	.word	0x42470000
 8001528:	42470e80 	.word	0x42470e80
 800152c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001530:	f7ff fc10 	bl	8000d54 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e106      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b85      	ldr	r3, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x4e4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_RCC_OscConfig+0x2f0>
 8001556:	4b81      	ldr	r3, [pc, #516]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a80      	ldr	r2, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	e01c      	b.n	800159e <HAL_RCC_OscConfig+0x32a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d10c      	bne.n	8001586 <HAL_RCC_OscConfig+0x312>
 800156c:	4b7b      	ldr	r3, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a7a      	ldr	r2, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
 8001578:	4b78      	ldr	r3, [pc, #480]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	4a77      	ldr	r2, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6713      	str	r3, [r2, #112]	; 0x70
 8001584:	e00b      	b.n	800159e <HAL_RCC_OscConfig+0x32a>
 8001586:	4b75      	ldr	r3, [pc, #468]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a74      	ldr	r2, [pc, #464]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a71      	ldr	r2, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d015      	beq.n	80015d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff fbd5 	bl	8000d54 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fbd1 	bl	8000d54 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e0c5      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c4:	4b65      	ldr	r3, [pc, #404]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0ee      	beq.n	80015ae <HAL_RCC_OscConfig+0x33a>
 80015d0:	e014      	b.n	80015fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fbbf 	bl	8000d54 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fbbb 	bl	8000d54 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0af      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ee      	bne.n	80015da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d105      	bne.n	800160e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001602:	4b56      	ldr	r3, [pc, #344]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a55      	ldr	r2, [pc, #340]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 8001608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 809b 	beq.w	800174e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	d05c      	beq.n	80016de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d141      	bne.n	80016b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x4ec>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fb8f 	bl	8000d54 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fb8b 	bl	8000d54 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e081      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164c:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	019b      	lsls	r3, r3, #6
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	3b01      	subs	r3, #1
 8001672:	041b      	lsls	r3, r3, #16
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	061b      	lsls	r3, r3, #24
 800167c:	4937      	ldr	r1, [pc, #220]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_RCC_OscConfig+0x4ec>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb64 	bl	8000d54 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb60 	bl	8000d54 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e056      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x41c>
 80016ae:	e04e      	b.n	800174e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb4d 	bl	8000d54 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fb49 	bl	8000d54 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e03f      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x44a>
 80016dc:	e037      	b.n	800174e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e032      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d028      	beq.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d121      	bne.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d11a      	bne.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001720:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001722:	4293      	cmp	r3, r2
 8001724:	d111      	bne.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d107      	bne.n	800174a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40007000 	.word	0x40007000
 800175c:	40023800 	.word	0x40023800
 8001760:	42470060 	.word	0x42470060

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0cc      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b63      	ldr	r3, [pc, #396]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b8      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494d      	ldr	r1, [pc, #308]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d044      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d119      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e067      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fa7e 	bl	8000d54 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff fa7a 	bl	8000d54 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d20c      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490e      	ldr	r1, [pc, #56]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 f821 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	490a      	ldr	r1, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	5ccb      	ldrb	r3, [r1, r3]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f9de 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00
 8001920:	40023800 	.word	0x40023800
 8001924:	08002b48 	.word	0x08002b48
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001948:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d00d      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x40>
 8001954:	2b08      	cmp	r3, #8
 8001956:	f200 80bd 	bhi.w	8001ad4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x34>
 800195e:	2b04      	cmp	r3, #4
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x3a>
 8001962:	e0b7      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001966:	60bb      	str	r3, [r7, #8]
       break;
 8001968:	e0b7      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800196c:	60bb      	str	r3, [r7, #8]
      break;
 800196e:	e0b4      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001970:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001978:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197a:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d04d      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	461a      	mov	r2, r3
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	ea02 0800 	and.w	r8, r2, r0
 800199e:	ea03 0901 	and.w	r9, r3, r1
 80019a2:	4640      	mov	r0, r8
 80019a4:	4649      	mov	r1, r9
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	014b      	lsls	r3, r1, #5
 80019b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b4:	0142      	lsls	r2, r0, #5
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	ebb0 0008 	subs.w	r0, r0, r8
 80019be:	eb61 0109 	sbc.w	r1, r1, r9
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	018b      	lsls	r3, r1, #6
 80019cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019d0:	0182      	lsls	r2, r0, #6
 80019d2:	1a12      	subs	r2, r2, r0
 80019d4:	eb63 0301 	sbc.w	r3, r3, r1
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	00d9      	lsls	r1, r3, #3
 80019e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e6:	00d0      	lsls	r0, r2, #3
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	eb12 0208 	adds.w	r2, r2, r8
 80019f0:	eb43 0309 	adc.w	r3, r3, r9
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	0259      	lsls	r1, r3, #9
 80019fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a02:	0250      	lsls	r0, r2, #9
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f7fe fbde 	bl	80001d4 <__aeabi_uldivmod>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e04a      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	ea02 0400 	and.w	r4, r2, r0
 8001a3a:	ea03 0501 	and.w	r5, r3, r1
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4629      	mov	r1, r5
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	014b      	lsls	r3, r1, #5
 8001a4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a50:	0142      	lsls	r2, r0, #5
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	1b00      	subs	r0, r0, r4
 8001a58:	eb61 0105 	sbc.w	r1, r1, r5
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	018b      	lsls	r3, r1, #6
 8001a66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a6a:	0182      	lsls	r2, r0, #6
 8001a6c:	1a12      	subs	r2, r2, r0
 8001a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	00d9      	lsls	r1, r3, #3
 8001a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a80:	00d0      	lsls	r0, r2, #3
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	1912      	adds	r2, r2, r4
 8001a88:	eb45 0303 	adc.w	r3, r5, r3
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	0299      	lsls	r1, r3, #10
 8001a96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a9a:	0290      	lsls	r0, r2, #10
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	f7fe fb92 	bl	80001d4 <__aeabi_uldivmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	60bb      	str	r3, [r7, #8]
      break;
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ad6:	60bb      	str	r3, [r7, #8]
      break;
 8001ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ada:	68bb      	ldr	r3, [r7, #8]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08002b58 	.word	0x08002b58

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b38:	f7ff ffdc 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0b5b      	lsrs	r3, r3, #13
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08002b58 	.word	0x08002b58

08001b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e07b      	b.n	8001c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d108      	bne.n	8001b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b7e:	d009      	beq.n	8001b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
 8001b86:	e005      	b.n	8001b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe ff54 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	ea42 0103 	orr.w	r1, r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	f003 0104 	and.w	r1, r3, #4
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f003 0210 	and.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b088      	sub	sp, #32
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_SPI_Transmit+0x22>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e126      	b.n	8001ede <HAL_SPI_Transmit+0x270>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c98:	f7ff f85c 	bl	8000d54 <HAL_GetTick>
 8001c9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d002      	beq.n	8001cb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cb2:	e10b      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_SPI_Transmit+0x52>
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cc4:	e102      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	88fa      	ldrh	r2, [r7, #6]
 8001cde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	88fa      	ldrh	r2, [r7, #6]
 8001ce4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d0c:	d10f      	bne.n	8001d2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d007      	beq.n	8001d4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d54:	d14b      	bne.n	8001dee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_SPI_Transmit+0xf6>
 8001d5e:	8afb      	ldrh	r3, [r7, #22]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d13e      	bne.n	8001de2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	881a      	ldrh	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	1c9a      	adds	r2, r3, #2
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d88:	e02b      	b.n	8001de2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d112      	bne.n	8001dbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	881a      	ldrh	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	1c9a      	adds	r2, r3, #2
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dbc:	e011      	b.n	8001de2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dbe:	f7fe ffc9 	bl	8000d54 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d803      	bhi.n	8001dd6 <HAL_SPI_Transmit+0x168>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d102      	bne.n	8001ddc <HAL_SPI_Transmit+0x16e>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001de0:	e074      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ce      	bne.n	8001d8a <HAL_SPI_Transmit+0x11c>
 8001dec:	e04c      	b.n	8001e88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_SPI_Transmit+0x18e>
 8001df6:	8afb      	ldrh	r3, [r7, #22]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d140      	bne.n	8001e7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	330c      	adds	r3, #12
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e22:	e02c      	b.n	8001e7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d113      	bne.n	8001e5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e58:	e011      	b.n	8001e7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e5a:	f7fe ff7b 	bl	8000d54 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d803      	bhi.n	8001e72 <HAL_SPI_Transmit+0x204>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d102      	bne.n	8001e78 <HAL_SPI_Transmit+0x20a>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e7c:	e026      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1cd      	bne.n	8001e24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fbcb 	bl	8002628 <SPI_EndRxTxTransaction>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	e000      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
  }

error:
 8001eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b088      	sub	sp, #32
 8001eea:	af02      	add	r7, sp, #8
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f02:	d112      	bne.n	8001f2a <HAL_SPI_Receive+0x44>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10e      	bne.n	8001f2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f8f1 	bl	8002108 <HAL_SPI_TransmitReceive>
 8001f26:	4603      	mov	r3, r0
 8001f28:	e0ea      	b.n	8002100 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_SPI_Receive+0x52>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e0e3      	b.n	8002100 <HAL_SPI_Receive+0x21a>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f40:	f7fe ff08 	bl	8000d54 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d002      	beq.n	8001f58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f56:	e0ca      	b.n	80020ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_Receive+0x7e>
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f68:	e0c1      	b.n	80020ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d007      	beq.n	8001ff0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d162      	bne.n	80020be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ff8:	e02e      	b.n	8002058 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d115      	bne.n	8002034 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f103 020c 	add.w	r2, r3, #12
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002032:	e011      	b.n	8002058 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002034:	f7fe fe8e 	bl	8000d54 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d803      	bhi.n	800204c <HAL_SPI_Receive+0x166>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204a:	d102      	bne.n	8002052 <HAL_SPI_Receive+0x16c>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002056:	e04a      	b.n	80020ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1cb      	bne.n	8001ffa <HAL_SPI_Receive+0x114>
 8002062:	e031      	b.n	80020c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d113      	bne.n	800209a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207c:	b292      	uxth	r2, r2
 800207e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002098:	e011      	b.n	80020be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800209a:	f7fe fe5b 	bl	8000d54 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d803      	bhi.n	80020b2 <HAL_SPI_Receive+0x1cc>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d102      	bne.n	80020b8 <HAL_SPI_Receive+0x1d2>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020bc:	e017      	b.n	80020ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1cd      	bne.n	8002064 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fa45 	bl	800255c <SPI_EndRxTransaction>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
 80020ea:	e000      	b.n	80020ee <HAL_SPI_Receive+0x208>
  }

error :
 80020ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002116:	2301      	movs	r3, #1
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_SPI_TransmitReceive+0x26>
 800212a:	2302      	movs	r3, #2
 800212c:	e18a      	b.n	8002444 <HAL_SPI_TransmitReceive+0x33c>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002136:	f7fe fe0d 	bl	8000d54 <HAL_GetTick>
 800213a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002154:	2b01      	cmp	r3, #1
 8002156:	d00f      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x70>
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215e:	d107      	bne.n	8002170 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d103      	bne.n	8002170 <HAL_SPI_TransmitReceive+0x68>
 8002168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800216c:	2b04      	cmp	r3, #4
 800216e:	d003      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002170:	2302      	movs	r3, #2
 8002172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002176:	e15b      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_SPI_TransmitReceive+0x82>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_SPI_TransmitReceive+0x82>
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002190:	e14e      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b04      	cmp	r3, #4
 800219c:	d003      	beq.n	80021a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2205      	movs	r2, #5
 80021a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d007      	beq.n	80021fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002202:	d178      	bne.n	80022f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_TransmitReceive+0x10a>
 800220c:	8b7b      	ldrh	r3, [r7, #26]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d166      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	1c9a      	adds	r2, r3, #2
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002236:	e053      	b.n	80022e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d11b      	bne.n	800227e <HAL_SPI_TransmitReceive+0x176>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d016      	beq.n	800227e <HAL_SPI_TransmitReceive+0x176>
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d113      	bne.n	800227e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	1c9a      	adds	r2, r3, #2
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d119      	bne.n	80022c0 <HAL_SPI_TransmitReceive+0x1b8>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d014      	beq.n	80022c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	b292      	uxth	r2, r2
 80022a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022bc:	2301      	movs	r3, #1
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022c0:	f7fe fd48 	bl	8000d54 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d807      	bhi.n	80022e0 <HAL_SPI_TransmitReceive+0x1d8>
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d6:	d003      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022de:	e0a7      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1a6      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x130>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1a1      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x130>
 80022f4:	e07c      	b.n	80023f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x1fc>
 80022fe:	8b7b      	ldrh	r3, [r7, #26]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d16b      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800232a:	e057      	b.n	80023dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d11c      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x26c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d017      	beq.n	8002374 <HAL_SPI_TransmitReceive+0x26c>
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	2b01      	cmp	r3, #1
 8002348:	d114      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	330c      	adds	r3, #12
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d119      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x2ae>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d014      	beq.n	80023b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023b2:	2301      	movs	r3, #1
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023b6:	f7fe fccd 	bl	8000d54 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d803      	bhi.n	80023ce <HAL_SPI_TransmitReceive+0x2c6>
 80023c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d102      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x2cc>
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023da:	e029      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1a2      	bne.n	800232c <HAL_SPI_TransmitReceive+0x224>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d19d      	bne.n	800232c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f917 	bl	8002628 <SPI_EndRxTxTransaction>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800240c:	e010      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	e000      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800242e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002440:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002444:	4618      	mov	r0, r3
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800245c:	f7fe fc7a 	bl	8000d54 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800246c:	f7fe fc72 	bl	8000d54 <HAL_GetTick>
 8002470:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	0d1b      	lsrs	r3, r3, #20
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002482:	e054      	b.n	800252e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d050      	beq.n	800252e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800248c:	f7fe fc62 	bl	8000d54 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	d902      	bls.n	80024a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d13d      	bne.n	800251e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ba:	d111      	bne.n	80024e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c4:	d004      	beq.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d107      	bne.n	80024e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e8:	d10f      	bne.n	800250a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002508:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e017      	b.n	800254e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3b01      	subs	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	429a      	cmp	r2, r3
 800254a:	d19b      	bne.n	8002484 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000

0800255c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002570:	d111      	bne.n	8002596 <SPI_EndRxTransaction+0x3a>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800257a:	d004      	beq.n	8002586 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002584:	d107      	bne.n	8002596 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259e:	d12a      	bne.n	80025f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d012      	beq.n	80025d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff ff49 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02d      	beq.n	800261c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e026      	b.n	800261e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2101      	movs	r1, #1
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff ff36 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01a      	beq.n	800261c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e013      	b.n	800261e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2101      	movs	r1, #1
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff ff23 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e000      	b.n	800261e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <SPI_EndRxTxTransaction+0x7c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <SPI_EndRxTxTransaction+0x80>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0d5b      	lsrs	r3, r3, #21
 8002640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002652:	d112      	bne.n	800267a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff fef4 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e00f      	b.n	800269a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3b01      	subs	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d0f2      	beq.n	800267a <SPI_EndRxTxTransaction+0x52>
 8002694:	e000      	b.n	8002698 <SPI_EndRxTxTransaction+0x70>
        break;
 8002696:	bf00      	nop
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000000 	.word	0x20000000
 80026a8:	165e9f81 	.word	0x165e9f81

080026ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e03f      	b.n	800273e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fa2a 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f829 	bl	8002748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274c:	b09f      	sub	sp, #124	; 0x7c
 800274e:	af00      	add	r7, sp, #0
 8002750:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800275c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275e:	68d9      	ldr	r1, [r3, #12]
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	ea40 0301 	orr.w	r3, r0, r1
 8002768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800276a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	431a      	orrs	r2, r3
 8002774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	431a      	orrs	r2, r3
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4313      	orrs	r3, r2
 8002780:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800278c:	f021 010c 	bic.w	r1, r1, #12
 8002790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002796:	430b      	orrs	r3, r1
 8002798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a6:	6999      	ldr	r1, [r3, #24]
 80027a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	ea40 0301 	orr.w	r3, r0, r1
 80027b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4bc5      	ldr	r3, [pc, #788]	; (8002acc <UART_SetConfig+0x384>)
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d004      	beq.n	80027c6 <UART_SetConfig+0x7e>
 80027bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4bc3      	ldr	r3, [pc, #780]	; (8002ad0 <UART_SetConfig+0x388>)
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d103      	bne.n	80027ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027c6:	f7ff f9b5 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 80027ca:	6778      	str	r0, [r7, #116]	; 0x74
 80027cc:	e002      	b.n	80027d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ce:	f7ff f99d 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 80027d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027dc:	f040 80b6 	bne.w	800294c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e2:	461c      	mov	r4, r3
 80027e4:	f04f 0500 	mov.w	r5, #0
 80027e8:	4622      	mov	r2, r4
 80027ea:	462b      	mov	r3, r5
 80027ec:	1891      	adds	r1, r2, r2
 80027ee:	6439      	str	r1, [r7, #64]	; 0x40
 80027f0:	415b      	adcs	r3, r3
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
 80027f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027f8:	1912      	adds	r2, r2, r4
 80027fa:	eb45 0303 	adc.w	r3, r5, r3
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	00d9      	lsls	r1, r3, #3
 8002808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800280c:	00d0      	lsls	r0, r2, #3
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	1911      	adds	r1, r2, r4
 8002814:	6639      	str	r1, [r7, #96]	; 0x60
 8002816:	416b      	adcs	r3, r5
 8002818:	667b      	str	r3, [r7, #100]	; 0x64
 800281a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	1891      	adds	r1, r2, r2
 8002826:	63b9      	str	r1, [r7, #56]	; 0x38
 8002828:	415b      	adcs	r3, r3
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002830:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002834:	f7fd fcce 	bl	80001d4 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4ba5      	ldr	r3, [pc, #660]	; (8002ad4 <UART_SetConfig+0x38c>)
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	011e      	lsls	r6, r3, #4
 8002846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002848:	461c      	mov	r4, r3
 800284a:	f04f 0500 	mov.w	r5, #0
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	1891      	adds	r1, r2, r2
 8002854:	6339      	str	r1, [r7, #48]	; 0x30
 8002856:	415b      	adcs	r3, r3
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
 800285a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800285e:	1912      	adds	r2, r2, r4
 8002860:	eb45 0303 	adc.w	r3, r5, r3
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	00d9      	lsls	r1, r3, #3
 800286e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002872:	00d0      	lsls	r0, r2, #3
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	1911      	adds	r1, r2, r4
 800287a:	65b9      	str	r1, [r7, #88]	; 0x58
 800287c:	416b      	adcs	r3, r5
 800287e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	461a      	mov	r2, r3
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	1891      	adds	r1, r2, r2
 800288c:	62b9      	str	r1, [r7, #40]	; 0x28
 800288e:	415b      	adcs	r3, r3
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002896:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800289a:	f7fd fc9b 	bl	80001d4 <__aeabi_uldivmod>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4b8c      	ldr	r3, [pc, #560]	; (8002ad4 <UART_SetConfig+0x38c>)
 80028a4:	fba3 1302 	umull	r1, r3, r3, r2
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	2164      	movs	r1, #100	; 0x64
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	3332      	adds	r3, #50	; 0x32
 80028b6:	4a87      	ldr	r2, [pc, #540]	; (8002ad4 <UART_SetConfig+0x38c>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028c4:	441e      	add	r6, r3
 80028c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c8:	4618      	mov	r0, r3
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	1894      	adds	r4, r2, r2
 80028d4:	623c      	str	r4, [r7, #32]
 80028d6:	415b      	adcs	r3, r3
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028de:	1812      	adds	r2, r2, r0
 80028e0:	eb41 0303 	adc.w	r3, r1, r3
 80028e4:	f04f 0400 	mov.w	r4, #0
 80028e8:	f04f 0500 	mov.w	r5, #0
 80028ec:	00dd      	lsls	r5, r3, #3
 80028ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028f2:	00d4      	lsls	r4, r2, #3
 80028f4:	4622      	mov	r2, r4
 80028f6:	462b      	mov	r3, r5
 80028f8:	1814      	adds	r4, r2, r0
 80028fa:	653c      	str	r4, [r7, #80]	; 0x50
 80028fc:	414b      	adcs	r3, r1
 80028fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	1891      	adds	r1, r2, r2
 800290c:	61b9      	str	r1, [r7, #24]
 800290e:	415b      	adcs	r3, r3
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002916:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800291a:	f7fd fc5b 	bl	80001d4 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	; 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a67      	ldr	r2, [pc, #412]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 0207 	and.w	r2, r3, #7
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4432      	add	r2, r6
 8002948:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800294a:	e0b9      	b.n	8002ac0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800294c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294e:	461c      	mov	r4, r3
 8002950:	f04f 0500 	mov.w	r5, #0
 8002954:	4622      	mov	r2, r4
 8002956:	462b      	mov	r3, r5
 8002958:	1891      	adds	r1, r2, r2
 800295a:	6139      	str	r1, [r7, #16]
 800295c:	415b      	adcs	r3, r3
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002964:	1912      	adds	r2, r2, r4
 8002966:	eb45 0303 	adc.w	r3, r5, r3
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	00d9      	lsls	r1, r3, #3
 8002974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002978:	00d0      	lsls	r0, r2, #3
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	eb12 0804 	adds.w	r8, r2, r4
 8002982:	eb43 0905 	adc.w	r9, r3, r5
 8002986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4618      	mov	r0, r3
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	008b      	lsls	r3, r1, #2
 800299a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800299e:	0082      	lsls	r2, r0, #2
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fc16 	bl	80001d4 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <UART_SetConfig+0x38c>)
 80029ae:	fba3 2302 	umull	r2, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	011e      	lsls	r6, r3, #4
 80029b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b8:	4618      	mov	r0, r3
 80029ba:	f04f 0100 	mov.w	r1, #0
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	1894      	adds	r4, r2, r2
 80029c4:	60bc      	str	r4, [r7, #8]
 80029c6:	415b      	adcs	r3, r3
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ce:	1812      	adds	r2, r2, r0
 80029d0:	eb41 0303 	adc.w	r3, r1, r3
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f04f 0500 	mov.w	r5, #0
 80029dc:	00dd      	lsls	r5, r3, #3
 80029de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029e2:	00d4      	lsls	r4, r2, #3
 80029e4:	4622      	mov	r2, r4
 80029e6:	462b      	mov	r3, r5
 80029e8:	1814      	adds	r4, r2, r0
 80029ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80029ec:	414b      	adcs	r3, r1
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	008b      	lsls	r3, r1, #2
 8002a04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a08:	0082      	lsls	r2, r0, #2
 8002a0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a0e:	f7fd fbe1 	bl	80001d4 <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002a18:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	3332      	adds	r3, #50	; 0x32
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a36:	441e      	add	r6, r3
 8002a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	1894      	adds	r4, r2, r2
 8002a46:	603c      	str	r4, [r7, #0]
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a50:	1812      	adds	r2, r2, r0
 8002a52:	eb41 0303 	adc.w	r3, r1, r3
 8002a56:	f04f 0400 	mov.w	r4, #0
 8002a5a:	f04f 0500 	mov.w	r5, #0
 8002a5e:	00dd      	lsls	r5, r3, #3
 8002a60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a64:	00d4      	lsls	r4, r2, #3
 8002a66:	4622      	mov	r2, r4
 8002a68:	462b      	mov	r3, r5
 8002a6a:	eb12 0a00 	adds.w	sl, r2, r0
 8002a6e:	eb43 0b01 	adc.w	fp, r3, r1
 8002a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	008b      	lsls	r3, r1, #2
 8002a86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a8a:	0082      	lsls	r2, r0, #2
 8002a8c:	4650      	mov	r0, sl
 8002a8e:	4659      	mov	r1, fp
 8002a90:	f7fd fba0 	bl	80001d4 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2164      	movs	r1, #100	; 0x64
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	3332      	adds	r3, #50	; 0x32
 8002aac:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <UART_SetConfig+0x38c>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	f003 020f 	and.w	r2, r3, #15
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4432      	add	r2, r6
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	377c      	adds	r7, #124	; 0x7c
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aca:	bf00      	nop
 8002acc:	40011000 	.word	0x40011000
 8002ad0:	40011400 	.word	0x40011400
 8002ad4:	51eb851f 	.word	0x51eb851f

08002ad8 <__libc_init_array>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	4d0d      	ldr	r5, [pc, #52]	; (8002b10 <__libc_init_array+0x38>)
 8002adc:	4c0d      	ldr	r4, [pc, #52]	; (8002b14 <__libc_init_array+0x3c>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	42a6      	cmp	r6, r4
 8002ae6:	d109      	bne.n	8002afc <__libc_init_array+0x24>
 8002ae8:	4d0b      	ldr	r5, [pc, #44]	; (8002b18 <__libc_init_array+0x40>)
 8002aea:	4c0c      	ldr	r4, [pc, #48]	; (8002b1c <__libc_init_array+0x44>)
 8002aec:	f000 f820 	bl	8002b30 <_init>
 8002af0:	1b64      	subs	r4, r4, r5
 8002af2:	10a4      	asrs	r4, r4, #2
 8002af4:	2600      	movs	r6, #0
 8002af6:	42a6      	cmp	r6, r4
 8002af8:	d105      	bne.n	8002b06 <__libc_init_array+0x2e>
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b00:	4798      	blx	r3
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7ee      	b.n	8002ae4 <__libc_init_array+0xc>
 8002b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0a:	4798      	blx	r3
 8002b0c:	3601      	adds	r6, #1
 8002b0e:	e7f2      	b.n	8002af6 <__libc_init_array+0x1e>
 8002b10:	08002b68 	.word	0x08002b68
 8002b14:	08002b68 	.word	0x08002b68
 8002b18:	08002b68 	.word	0x08002b68
 8002b1c:	08002b6c 	.word	0x08002b6c

08002b20 <memset>:
 8002b20:	4402      	add	r2, r0
 8002b22:	4603      	mov	r3, r0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d100      	bne.n	8002b2a <memset+0xa>
 8002b28:	4770      	bx	lr
 8002b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2e:	e7f9      	b.n	8002b24 <memset+0x4>

08002b30 <_init>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	bf00      	nop
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr

08002b3c <_fini>:
 8002b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3e:	bf00      	nop
 8002b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b42:	bc08      	pop	{r3}
 8002b44:	469e      	mov	lr, r3
 8002b46:	4770      	bx	lr
